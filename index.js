const express = require('express');const { createTransaction } = require('./transbank');const { WebpayPlus, Options, Environment } = require('transbank-sdk');const pagos = require('./pagos.json');const app = express();const PORT = process.env.PORT || 3000;// Configuración para producciónconst options = new Options(  '597055555532', // Código de comercio  '579B532A7440BB0C9079DED94D31EA1615BACEB56610332264630D42D0A36B1C', // API Key  Environment.Production // Usa Environment.Integration si estás en pruebas);// Necesario para leer parámetros POST de Transbankapp.use(express.urlencoded({ extended: true }));// URL públicaconst BASE_URL = "https://integracion-transbank.onrender.com";// CREACIÓN DE TRANSACCIÓNapp.get('/pago', async (req, res) => {  const id = req.query.id;  if (!id || !pagos[id]) {    return res.status(404).send('Pago no encontrado');  }  const { buyOrder, sessionId, amount } = pagos[id];  const returnUrl = `${BASE_URL}/retorno`;  try {    const { url, token } = await createTransaction({      buyOrder,      sessionId,      amount,      returnUrl    });    // Enviar formulario automático a Webpay    res.send(`      <html>        <body onload="document.forms[0].submit()">          <form action="${url}" method="POST">            <input type="hidden" name="token_ws" value="${token}" />          </form>        </body>      </html>    `);  } catch (error) {    console.error('Error creando transacción:', error);    res.status(500).send('Error en el servidor');  }});// RETORNO DESPUÉS DEL PAGO O CANCELACIÓNapp.all('/retorno', async (req, res) => {  const body = req.body || {};  const query = req.query || {};  const token_ws = body.token_ws || query.token_ws;  const tbk_token = body.TBK_TOKEN || query.TBK_TOKEN;  if (token_ws) {    try {      const transaction = new WebpayPlus.Transaction(options);      const result = await transaction.commit(token_ws);      res.send(`        <h1>✅ Transacción exitosa</h1>        <p>Orden: ${result.buy_order}</p>        <p>Monto: ${result.amount}</p>        <p>Estado: ${result.status}</p>        <p>Token: ${token_ws}</p>      `);    } catch (error) {      console.error('Error en commit:', error);      res.status(500).send('Error al confirmar la transacción.');    }  } else if (tbk_token) {    const orden = body.TBK_ORDEN_COMPRA || query.TBK_ORDEN_COMPRA;    const sesion = body.TBK_ID_SESION || query.TBK_ID_SESION;    res.send(`      <h1>❌ Transacción cancelada por el usuario</h1>      <p>Orden: ${orden}</p>      <p>Sesión: ${sesion}</p>      <p>Token: ${tbk_token}</p>    `);  } else {    res.status(400).send("⚠️ No se recibió información válida de Transbank.");  }});// INICIOapp.listen(PORT, () => {  console.log(`Servidor escuchando en ${BASE_URL}`);});