const express = require('express');const { createTransaction, options } = require('./transbank');const { WebpayPlus } = require('transbank-sdk');const app = express();const PORT = process.env.PORT || 3000;// Middleware para leer datos POST (Transbank lo requiere)app.use(express.urlencoded({ extended: true }));// URL pública de tu app (Render, Vercel, etc.)const BASE_URL = "https://landing-pago-sin-app.onrender.com";// RUTA PARA CREAR ORDEN DINÁMICAMENTE DESDE URLapp.get('/pago', async (req, res) => {  try {    const encodedData = req.query.data;    if (!encodedData) {      return res.status(400).send("Falta el parámetro 'data' en la URL.");    }    // Decodificar el JSON    const data = JSON.parse(decodeURIComponent(encodedData));    // Validaciones mínimas    if (!data.price || isNaN(data.price)) {      return res.status(400).send("El precio es inválido o falta.");    }    const amount = parseInt(data.price);    const buyOrder = `ORD-${Date.now()}`;    const sessionId = `SESSION-${Date.now()}`;    const returnUrl = `${BASE_URL}/retorno`;    // Crear transacción en Transbank    const { url, token } = await createTransaction({      buyOrder,      sessionId,      amount,      returnUrl    });    // Redirigir automáticamente con formulario POST    res.send(`      <html>        <body onload="document.forms[0].submit()">          <form action="${url}" method="POST">            <input type="hidden" name="token_ws" value="${token}" />          </form>        </body>      </html>    `);  } catch (error) {    console.error('Error procesando el pago:', error);    res.status(500).send('Error al generar la transacción.');  }});// RUTA DE RETORNO DESPUÉS DEL PAGOapp.all('/retorno', async (req, res) => {  const body = req.body || {};  const query = req.query || {};  const token_ws = body.token_ws || query.token_ws;  const tbk_token = body.TBK_TOKEN || query.TBK_TOKEN;  if (token_ws) {    try {      const transaction = new WebpayPlus.Transaction(options);      const result = await transaction.commit(token_ws);      res.send(`        <h1>✅ Transacción exitosa</h1>        <p>Orden: ${result.buy_order}</p>        <p>Monto: ${result.amount}</p>        <p>Estado: ${result.status}</p>        <p>Token: ${token_ws}</p>      `);    } catch (error) {      console.error('Error en commit:', error);      res.status(500).send('Error al confirmar la transacción.');    }  } else if (tbk_token) {    const orden = body.TBK_ORDEN_COMPRA || query.TBK_ORDEN_COMPRA;    const sesion = body.TBK_ID_SESION || query.TBK_ID_SESION;    res.send(`      <h1>❌ Transacción cancelada por el usuario</h1>      <p>Orden: ${orden}</p>      <p>Sesión: ${sesion}</p>      <p>Token: ${tbk_token}</p>    `);  } else {    res.status(400).send("⚠️ No se recibió información válida de Transbank.");  }});// INICIO DEL SERVIDORapp.listen(PORT, () => {  console.log(`Servidor escuchando en ${BASE_URL}`);});