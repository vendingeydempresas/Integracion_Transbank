// Asegúrate de tener esta importación al principio de tu archivo index.jsconst express = require('express');const { createTransaction } = require('./transbank');  // Asumiendo que tienes esta función en transbank.jsconst { WebpayPlus, Options, Environment } = require('transbank-sdk');const app = express(); // Aquí inicializas el servidor Expressconst PORT = process.env.PORT || 3000;// Configuración de Transbank (por ejemplo)const options = new Options(  '597055555532', // Código de comercio  '579B532A7440BB0C9079DED94D31EA1615BACEB56610332264630D42D0A36B1C', // API Key  Environment.Integration);app.use(express.urlencoded({ extended: true }));  // Para leer datos en el body de las solicitudes// Define BASE_URL para usar en los redireccionamientosconst BASE_URL = "https://integracion-transbank.onrender.com"; // Actualiza a la URL correcta de tu servidor// Define las rutas para manejar las solicitudesapp.get('/pago', async (req, res) => {  const data = req.query.data;  if (!data) {    return res.status(400).send('Datos de pago no recibidos');  }  let producto;  try {    producto = JSON.parse(decodeURIComponent(data));  } catch (err) {    return res.status(400).send('Error al procesar los datos del pago');  }  const { title, price } = producto;  const buyOrder = `order_${Date.now()}`;  const sessionId = `session_${Math.floor(Math.random() * 100000)}`;  const amount = price;  const returnUrl = `${BASE_URL}/retorno`; // Usa BASE_URL aquí  try {    const { url, token } = await createTransaction({      buyOrder,      sessionId,      amount,      returnUrl,    });    res.send(`      <html>        <body onload="document.forms[0].submit()">          <form action="${url}" method="POST">            <input type="hidden" name="token_ws" value="${token}" />          </form>        </body>      </html>    `);  } catch (error) {    console.error('Error creando transacción:', error);    res.status(500).send('Error en el servidor');  }});// Ruta para manejar el retorno después del pagoapp.all('/retorno', async (req, res) => {  const body = req.body || {};  const query = req.query || {};  const token_ws = body.token_ws || query.token_ws;  // El token que Webpay envía al retornar al servidor  const tbk_token = body.TBK_TOKEN || query.TBK_TOKEN;  if (token_ws) {    try {      const transaction = new WebpayPlus.Transaction(options);      const result = await transaction.commit(token_ws);  // Confirmamos la transacción con Webpay      // Mostramos el estado de la transacción (AUTORIZED o FAILED) y otros detalles      res.send(`        <html>          <body>            <h1>✅ Transacción exitosa</h1>            <p>Orden: ${result.buy_order}</p>            <p>Monto: ${result.amount}</p>            <p>Estado: ${result.status}</p>            <p>Token: ${token_ws}</p>            <p>Detalle de la transacción: ${JSON.stringify(result)}</p>          </body>        </html>      `);    } catch (error) {      console.error('Error en commit:', error);      res.status(500).send('Error al confirmar la transacción.');    }  } else if (tbk_token) {    // Si el usuario cancela la transacción en Webpay    const orden = body.TBK_ORDEN_COMPRA || query.TBK_ORDEN_COMPRA;    const sesion = body.TBK_ID_SESION || query.TBK_ID_SESION;    res.send(`      <html>        <body>          <h1>❌ Transacción cancelada por el usuario</h1>          <p>Orden: ${orden}</p>          <p>Sesión: ${sesion}</p>          <p>Token: ${tbk_token}</p>        </body>      </html>    `);  } else {    res.status(400).send("⚠️ No se recibió información válida de Transbank.");  }});// Inicia el servidorapp.listen(PORT, () => {  console.log(`Servidor escuchando en puerto ${PORT}`);});